using System.ComponentModel;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Connectors.OpenAI;


namespace CardMaker;

public class Tools
{
    private readonly Kernel kernel;
    private readonly string prompt;
    private readonly string toolsList;
    // Generated by Copilot
    public Tools(string prompt, string toolsList, Kernel kernel)
    {
        this.kernel = kernel;
        this.prompt = prompt;
        this.toolsList = toolsList;
    }


    [KernelFunction("random_quote")]
    [Description("retrieve a random quote.")]
    [return: Description("a random quote for a card.")]
    public async Task<string> random_quote(int card_number, string suit_theme, string role, string text)
    {
        var executionSettings = new OpenAIPromptExecutionSettings {
            Temperature = 1f, // warm it up!
            TopP = 1f,
         };
        var f = kernel.CreateFunctionFromPrompt(prompt, executionSettings);
        var result = await f.InvokeAsync(kernel);
        return result.ToString();
    }


    [KernelFunction("save_cards")]
    [Description("Save the card suit to a local file.")]
    [return: Description("The full card suit in JSON format.")]
    public async Task<string> save_cards(string json_document, [Description("card suit name, such as hearts, clubs, spades, or diamonds")] string suit)
    {
        string filePath = $"{suit}_cards.json";
        await File.WriteAllTextAsync(filePath, json_document);
        return json_document;
    }

}

